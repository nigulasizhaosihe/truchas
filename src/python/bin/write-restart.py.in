#!/usr/bin/env python3

#===============================================================================
#
# This file is part of Truchas. 3-Clause BSD license; see the LICENSE file.
#
#===============================================================================

import argparse
import os
import sys

# Try to import through PYTHONPATH, and if not found, look in the truchas
# install directory, set by CMake at configure-time.
try:
    import truchas
except ImportError:
    sys.path.append("@TruchasPython_INSTALL_PREFIX@")
    import truchas


def print_cycles(truchas_data):
    """Prints a list of available cycles"""
    nseries = truchas_data.num_series()
    if nseries > 0:
        cycle_time = [(truchas_data.cycle(s+1), truchas_data.time(s+1))
                      for s in range(nseries)]
        print(" cycle   time")
        print('-'*29)
        for ct in cycle_time:
            print(ct)
    else:
        print("no cycle output exists")


def parse_argv():
    parser = argparse.ArgumentParser(
        description=("Creates a Truchas restart file using data "
                     "from an h5 output file."))
    parser.add_argument("-l", action="store_true",
                        help=("Print a list of the available cycles from which "
                              "the restart file can be created. No restart file "
                              "is written."))
    parser.add_argument("-n", type=int, default=-1,
                        help=("Data from cycle N is used to generate the "
                              "restart file; if not specified the last cycle "
                              "is used."))
    parser.add_argument("-o", type=str, metavar="FILE",
                        help=("Write restart data to FILE. If not specified, "
                              "FILE is taken to be the H5FILE name with the "
                              ".h5 suffix replaced by .restart.N, where N is "
                              "the cycle number."))
    parser.add_argument("-m", type=str, metavar="FILE",
                        help=("Create a mapped restart file using the specified "
                              "ExodusII mesh FILE as the target mesh."))
    parser.add_argument("-s", type=float, default=1, metavar="FLOAT",
                        help=("Scale the mapped restart mesh by the "
                              "factor FLOAT."))
    parser.add_argument("h5file", help="Input H5 file.")
    return parser.parse_args()


if __name__ == "__main__":
    args = parse_argv()
    try:
        if args.m is not None:
            assert args.s > 0
            exofile = os.path.abspath(args.m)
            assert os.path.isfile(exofile)
            print('Mapping to mesh at "{:s}"'.format(exofile))
            truchas_data = truchas.TruchasMappedData(args.h5file, exofile, args.s)
        else:
            truchas_data = truchas.TruchasData(args.h5file)
    except OSError as e:
        print('Unable to open "{:s}"'.format(args.h5file))
        sys.exit(1)

    if args.l:
        print_cycles(truchas_data)
    else:
        # get the cycle id and series id
        nseries = truchas_data.num_series()
        if args.n == -1:
            cycle = truchas_data.cycle(nseries)
            series_id = nseries
        else:
            cycles = [truchas_data.cycle(s+1) for s in range(nseries)]
            cycle = args.n
            series_id = cycles.index(cycle) + 1

        outfile = args.o if args.o \
            else os.path.splitext(os.path.basename(args.h5file))[0] \
                 + ".restart." + str(cycle)
        outfile = os.path.abspath(outfile)

        # If the parent output directory doesn't exist, create it
        outdir = os.path.dirname(outfile)
        if not os.path.exists(outdir):
            os.mkdir(outdir)

        print("Using cycle {:d} and writing to {:s}".format(cycle, outfile))
        truchas_data.write_restart(outfile, series_id)
