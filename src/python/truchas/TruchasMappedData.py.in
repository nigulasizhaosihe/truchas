#===============================================================================
#
# This file is part of Truchas. 3-Clause BSD license; see the LICENSE file.
#
#===============================================================================

import numpy as np

# Try to import through PYTHONPATH, and if not found, look in the truchas
# install directory, set by CMake at configure-time.
try:
    import grid_mapping
except ImportError:
    sys.path.append("@TruchasPython_INSTALL_PREFIX@")
    import grid_mapping

# TruchasData is imported after grid_mapping. See __init__.py for explanation.
from .TruchasData import TruchasData


class TruchasMappedData(TruchasData):
    """Interface for mapping Truchas Data to new exodus mesh. This class
    inherits all of the methods from the :class:`TruchasData` class, and
    invisibly maps fields to the new mesh prior to returning them.
    Initialization takes extra parameters for mapping.

    :param filename: Filename of the Truchas h5 output file.
    :type filename: str

    :param exodus_filename: Filename of the exodus mesh file to which the data
        shall be mapped
    :type exodus_filename: str

    :param scale_factor: Scaling factor for the target exodus mesh.
    :type scale_factor: number

    :param use_portage: Flag to use the Portage backend rather than the Truchas
        built-in mapper. Defaults to False, using the Truchas built-in mapper.
    :type use_portage: bool
    """

    def __init__(self, output_filename, exodus_filename, scale_factor=1, use_portage=False):
        super().__init__(output_filename)
        self.mapped = True

        map_data = grid_mapping.mapper_init(self.nnode, self.ncell,
                                            self.cell_node_map()+1,
                                            self.blockid(),
                                            self.node_coordinates(),
                                            exodus_filename, scale_factor, use_portage)

        # get destination mesh data and map data
        self.ncell = map_data.ncell
        self.nnode = map_data.nnode
        self._node_coordinates = map_data.node_coordinates
        self._cnode = map_data.cnode - 1
        self._blockid = map_data.blockid
        self._mapper = map_data.mapper
        self._centroid = None


    def __del__(self):
        self.finalize()


    def _field(self, series_id, field_name):
        """Return the requested field, mapped to the new mesh."""

        # Currently scalar fields are supported, and VOF.
        # Other vector fields not yet supported.
        shape = self._series(series_id)[field_name].shape

        field = super()._field(series_id, field_name)
        if len(shape) == 1:
            mapped_field = grid_mapping.map_field(field, self._mapper, self.ncell)
        elif len(shape) == 2 and field_name == "VOF":
            # VOF components are all mapped independently
            mapped_field = \
                np.array([grid_mapping.map_field(f, self._mapper, self.ncell)
                          for f in field.transpose()]).transpose()
        else:
            raise NotImplementedError(("Multidimensional fields other than VOF "
                                       "are not yet supported for mesh mapping."))

        return mapped_field


    def finalize(self):
        """Free the memory used by the grid mapper. If mapping between multiple
        different mesh combinations, it's best to call this directly rather than
        wait for Python garbage collection to clean it up.
        """
        if self._mapper:
            grid_mapping.mapper_finalize(self._mapper)
            self._mapper = None
